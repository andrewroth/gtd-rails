==== Installation Notes

An initializer file cas.rb has been created for you in RAILS_ROOT/config/initializers. If you are using an older version
of Rails that doesn't automatically include the initializer files, add the following to the bottom of your environment.rb:

  Dir.glob(File.join(RAILS_ROOT, "config", "initializers", "*.rb")).sort.map { |initializer| require initializer }
  
==== Session Store Issues

If you are using cookies for your session store, you will likely encounter 


==== Using RubyCAS-Client in Rails controllers

In your <tt>app/controllers/application.rb</tt> (or in whichever controller you want to add the CAS filter for):

  before_filter CASClient::Frameworks::Rails::Filter
  
That's it. You should now find that you are redirected to your CAS login page whenever you try to access any action
in your protected controller. You can of course qualify the <tt>before_filter</tt> as you would with any other ActionController
filter. For example: 

  before_filter CASClient::Frameworks::Rails::Filter, :except => [ :unprotected_action, :another_unprotected_action ]

<b>Once the user has been authenticated, their authenticated username is available under <tt>session[:cas_user]</tt>,</b>
If you want to do something with this username (for example load a user record from the database), you can append another 
filter method that checks for this value and does whatever you need it to do.


==== Defining a 'logout' action

Your Rails application's controller(s) will probably have some sort of logout function. Here you can do any necessary local
cleanup, and then call <tt>CASClient::Frameworks::Rails::Filter.logout(controller)</tt>. For example:

  class ApplicationController < ActionController::Base
    
    # ...
  
    def logout
      # optionally do some local cleanup here
      # ...
      
      CASClient::Frameworks::Rails::Filter.logout(self)
    end
  end

By default, the logout method will clear the local Rails session, do some local CAS cleanup, and redirect to the CAS
logout page. Additionally, the <tt>request.referer</tt> value from the <tt>controller</tt> instance is passed to the
CAS server as a 'destination' parameter. This allows RubyCAS server to provide a follow-up login page allowing
the user to log back in to the service they just logged out from using a different username and password. Other
CAS server implemenations may use this 'destination' parameter in different ways. 


==== Gatewayed (i.e. optional) authentication

"Gatewaying" essentially allows for optional CAS authentication. Users who already have a pre-existing CAS SSO session 
will be automatically authenticated for the gatewayed service, while those who do not will be allowed to access the service 
without authentication. This is useful for example when you want to show some additional private content on a homepage to 
authenticated users, but also want anonymous users to be able to access the page without first logging in.

To allow users to access a page without authenticatin, simply use <tt>CASClient::Frameworks::Rails::GatewayFilter</tt>
in place of <tt>CASClient::Frameworks::Rails::Filter</tt> in your controller. For example, you may want to require
CAS authentication for all actions in a controller except the index action:

  class ExampleController < ApplicationController
    before_filter CASClient::Frameworks::Rails::GatewayFilter, :only => :index
    before_filter CASClient::Frameworks::Rails::Filter, :except => :index
    
    # ...
  end
  
To provide a login URL for unauthenticated users:

  <%= link_to("Login", CASClient::Frameworks::Rails::Filter.login_url(controller)) %>